(()=>{"use strict";var e={580:(e,t,r)=>{r.r(t)},529:(e,t,r)=>{r.r(t)},274:(e,t,r)=>{r.r(t)},646:(e,t,r)=>{r.r(t)},717:function(e,t,r){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=o(r(842)),n=r(527);t.default=class{constructor(){this.controller=new s.default,this.view=new n.AppView}start(){document.querySelector(".sources").addEventListener("click",(e=>this.controller.getNews(e,(e=>{e&&this.view.drawNews(e)})))),this.controller.getSources((e=>{e&&this.view.drawSources(e)}))}}},853:function(e,t,r){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=o(r(24));class n extends s.default{constructor(){super("https://nodenews.up.railway.app/",{apiKey:"f74f146e196247a0901b90a947ac928a"})}}t.default=n},842:function(e,t,r){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=o(r(853));class n extends s.default{getSources(e){super.getResp({endpoint:"sources"},e)}getNews(e,t){let r=e.target;const o=e.currentTarget;for(;r!==o;){if(r.classList.contains("source__item")){const e=r.getAttribute("data-source-id");return void(e&&o.getAttribute("data-source")!==e&&(o.setAttribute("data-source",e),super.getResp({endpoint:"everything",options:{sources:e}},t)))}r.parentElement&&(r=r.parentElement)}}}t.default=n},24:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const o=r(109);t.default=class{constructor(e,t){this.baseLink=e,this.options=t,this.baseLink=e,this.options=t}getResp({endpoint:e,options:t},r=(()=>{console.error("No callback for GET response")})){this.load("GET",e,r,t)}errorHandler(e){if(!e.ok)throw 401!==e.status&&404!==e.status||console.log(`Sorry, but there is ${e.status} error: ${e.statusText}`),Error(e.statusText);return e}makeUrl(e,t){const r=Object.assign(Object.assign({},this.options),t);let o=`${this.baseLink}${e}?`;return Object.keys(r).forEach((e=>{o+=`${e}=${r[e]}&`})),o.slice(0,-1)}load(e,t,r,s){(0,o.toggleLoader)(),fetch(this.makeUrl(t,s),{method:e}).then(this.errorHandler).then((e=>e.json())).then((e=>r(e))).catch((e=>console.error(e))).finally((()=>(0,o.toggleLoader)()))}}},527:function(e,t,r){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AppView=void 0;const s=r(868),n=o(r(798)),u=o(r(53));class a{constructor(){this.news=new n.default,this.sources=new u.default}drawNews(e){const t=(null==e?void 0:e.articles)||[];this.news.draw(t)}drawSources(e){const t=(null==e?void 0:e.sources)||[];this.sources.draw(t),(0,s.drawFilteredNews)(t,this.sources)}}t.AppView=a,t.default=a},868:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.drawFilteredNews=void 0,t.drawFilteredNews=(e,t)=>{const r=document.querySelector(".text-field__input");null==r||r.addEventListener("input",(o=>{const s=e.filter((e=>e.name.toLowerCase().includes(r.value)));t.draw(s)}))}},798:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),r(580),t.default=class{draw(e){const t=e.length>=10?e.filter(((e,t)=>t<10)):e,r=document.createDocumentFragment(),o=document.querySelector("#newsItemTemp");t.forEach(((e,t)=>{var s;const n=o.content.cloneNode(!0);t%2&&(null===(s=n.querySelector(".news__item"))||void 0===s||s.classList.add("alt")),n.querySelector(".news__meta-photo").style.backgroundImage=`url(${e.urlToImage||"img/news_placeholder.jpg"})`,n.querySelector(".news__meta-author").textContent=e.author||e.source.name,n.querySelector(".news__meta-date").textContent=e.publishedAt.slice(0,10).split("-").reverse().join("-"),n.querySelector(".news__description-title").textContent=e.title,n.querySelector(".news__description-source").textContent=e.source.name,n.querySelector(".news__description-content").textContent=e.description,n.querySelector(".news__read-more a").setAttribute("href",e.url),r.append(n)})),document.querySelector(".news").innerHTML="",document.querySelector(".news").appendChild(r)}}},53:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),r(529),t.default=class{draw(e){const t=document.createDocumentFragment(),r=document.querySelector("#sourceItemTemp");e.forEach((e=>{const o=r.content.cloneNode(!0);o.querySelector(".source__item-name").textContent=e.name,o.querySelector(".source__item").setAttribute("data-source-id",e.id),t.append(o)}));const o=document.querySelector(".sources");if(o.innerHTML="",e.length)o.style.display="grid",o.append(t);else{const e=document.createElement("span");e.className="emptyNews",e.textContent="Please, make another request!",o.style.display="flex",o.append(e)}}}},109:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.toggleLoader=void 0,t.toggleLoader=()=>document.querySelector(".shadow").classList.toggle("loading")},607:function(e,t,r){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=o(r(717));r(274),r(646),(new s.default).start()}},t={};function r(o){var s=t[o];if(void 0!==s)return s.exports;var n=t[o]={exports:{}};return e[o].call(n.exports,n,n.exports,r),n.exports}r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,